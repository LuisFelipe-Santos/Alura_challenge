name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: minha_aplicacao
  ECS_SERVICE: minha_aplicacao_service
  ECS_CLUSTER: minha_aplicacao_cluster
  CONTAINER_NAME: minha_aplicacao

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        # O Dockerfile est√° localizado em setup/Dockerfile
        docker build -t minha_aplicacao:latest -f ./setup/Dockerfile .
        docker tag minha_aplicacao:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest

    - name: Fill in the new image ID in the Amazon ECS task definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: minha_aplicacao
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
